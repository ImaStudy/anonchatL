from flask import Flask
from threading import Thread
import threading
import telebot
from telebot import types
import time
import logging
import requests

logging.basicConfig(level=logging.INFO)

TOKEN = "7694567532:AAF2ith3388eqkIwrfyCRLmzm7icLZsXDM0"
bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
user_gender = {}
user_age = {}
waiting_for_gender_change = set()
users_waiting = []
active_chats = {}
shown_welcome = set()

# === Flask-–º–∞—Ä—à—Ä—É—Ç –¥–ª—è UptimeRobot ===
@app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ —Å–ø–∏—Ç!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive_ping():
    while True:
        try:
            logging.info("üåê –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥ Flask-—Å–µ—Ä–≤–µ—Ä–∞")
            response = requests.get("http://127.0.0.1:8080", timeout=5)
            logging.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
        except Exception as e:
            logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {type(e).__name__}: {e}")
        time.sleep(180)

# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
def threaded(fn):
    def wrapper(message):
        threading.Thread(target=fn, args=(message,)).start()
    return wrapper

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@bot.message_handler(commands=['start'])
@threaded
def handle_start(message):
    chat_id = message.chat.id
    if chat_id in user_gender and chat_id in user_age:
        send_search_button(chat_id)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–ü–∞—Ä–µ–Ω—å"), types.KeyboardButton("–î–µ–≤—É—à–∫–∞"))
    msg = bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç ü§ñ\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_gender)

@bot.callback_query_handler(func=lambda call: call.data == "start")
def handle_inline_start(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
    bot.clear_step_handler_by_chat_id(chat_id)
    shown_welcome.add(chat_id)  # –ï—â—ë —Ä–∞–∑ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    handle_start(call.message)

@bot.message_handler(func=lambda msg: True)
def handle_entry_point(msg):
    chat_id = msg.chat.id
    text = msg.text.lower() if msg.text else ""

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–∏ –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª –µ—Å—Ç—å), –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if chat_id in user_gender and chat_id in user_age:
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å" ‚Äî –Ω–µ —Å–ª–∞—Ç—å —Å–Ω–æ–≤–∞
    if chat_id in shown_welcome:
        return

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if text in ["/search", "üîç –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "‚èπ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", "/stop", "/next"]:
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start"))
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.", reply_markup=markup)
    shown_welcome.add(chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ


def handle_gender(message):
    chat_id = message.chat.id
    if message.text not in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        bot.register_next_step_handler(msg, handle_gender)
        return

    user_gender[chat_id] = message.text
    bot.send_message(chat_id, f"–ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=types.ReplyKeyboardRemove())

    msg = bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 99):")
    bot.register_next_step_handler(msg, handle_age)

def handle_age(message):
    chat_id = message.chat.id
    try:
        age = int(message.text)
        if 18 <= age <= 99:
            user_age[chat_id] = age
            bot.send_message(chat_id, f"–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {age}", reply_markup=types.ReplyKeyboardRemove())
            send_search_button(chat_id)
        else:
            msg = bot.send_message(chat_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 99. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(msg, handle_age)
    except ValueError:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(msg, handle_age)

def send_search_button(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if chat_id in active_chats:
        markup.add(types.KeyboardButton("/next"), types.KeyboardButton("/stop"))
        bot.send_message(chat_id, "–í—ã –≤ —á–∞—Ç–µ.\n\n/next ‚Äî —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥.", reply_markup=markup)
    elif chat_id in users_waiting:
        markup.add(types.KeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"))
        bot.send_message(chat_id, "üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=markup)
    else:
        markup.add(types.KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
        bot.send_message(chat_id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.", reply_markup=markup)

@bot.message_handler(commands=['settings'])
@threaded
def change_settings(message):
    chat_id = message.chat.id
    waiting_for_gender_change.add(chat_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–ü–∞—Ä–µ–Ω—å"), types.KeyboardButton("–î–µ–≤—É—à–∫–∞"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –ø–æ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
@bot.message_handler(commands=['search'])
@threaded
def handle_search(message):
    chat_id = message.chat.id
    if chat_id in active_chats:
        bot.send_message(chat_id, "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ.")
        return
    if chat_id in users_waiting:
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"))
    bot.send_message(chat_id, "üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=markup)

    for user in users_waiting:
        if user != chat_id:
            active_chats[chat_id] = user
            active_chats[user] = chat_id
            users_waiting.remove(user)
            bot.send_message(chat_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next ‚Äî –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(user, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next ‚Äî –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", reply_markup=types.ReplyKeyboardRemove())
            return
    users_waiting.append(chat_id)

@bot.message_handler(func=lambda m: m.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")
@threaded
def stop_search(message):
    chat_id = message.chat.id
    if chat_id in users_waiting:
        users_waiting.remove(chat_id)
        bot.send_message(chat_id, "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
        send_search_button(chat_id)
    else:
        bot.send_message(chat_id, "–í—ã —Å–µ–π—á–∞—Å –Ω–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        send_search_button(chat_id)

@bot.message_handler(commands=['stop'])
@threaded
def stop_chat(message):
    end_chat(message.chat.id, notify=True)

@bot.message_handler(commands=['next'])
@threaded
def next_chat(message):
    chat_id = message.chat.id
    if chat_id in users_waiting:
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return
    end_chat(chat_id, notify=True)
    handle_search(message)

def end_chat(chat_id, notify=False):
    partner = active_chats.pop(chat_id, None)
    if partner:
        active_chats.pop(partner, None)
        if notify:
            bot.send_message(partner, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞")
            bot.send_message(chat_id, "üö´ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç")
            send_search_button(partner)
            send_search_button(chat_id)
    elif chat_id in users_waiting:
        users_waiting.remove(chat_id)
        if notify:
            bot.send_message(chat_id, "üö´ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å")
            send_search_button(chat_id)

@bot.message_handler(content_types=['photo'])
@threaded
def handle_photo(message):
    partner_id = active_chats.get(message.chat.id)
    if partner_id:
        try:
            file_id = message.photo[-1].file_id
            bot.send_photo(partner_id, file_id, caption=message.caption or "")
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

@bot.message_handler(content_types=['video'])
@threaded
def handle_video(message):
    partner_id = active_chats.get(message.chat.id)
    if partner_id:
        try:
            bot.send_video(partner_id, message.video.file_id, caption=message.caption or "")
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

@bot.message_handler(content_types=['video_note'])
@threaded
def handle_video_note(message):
    partner_id = active_chats.get(message.chat.id)
    if partner_id:
        try:
            bot.send_video_note(partner_id, message.video_note.file_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

@bot.message_handler(content_types=['document'])
@threaded
def handle_document(message):
    partner_id = active_chats.get(message.chat.id)
    if partner_id:
        try:
            bot.send_document(partner_id, message.document.file_id, caption=message.caption or "")
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

@bot.message_handler(func=lambda m: m.content_type == 'text')
@threaded
def handle_chat(message):
    chat_id = message.chat.id
    partner_id = active_chats.get(chat_id)
    if partner_id:
        try:
            bot.send_message(partner_id, message.text)
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

# === –ó–∞–ø—É—Å–∫ ===
def start_bot():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling")
    bot.remove_webhook()
    while True:
        try:
            bot.infinity_polling(timeout=90, long_polling_timeout=60)
        except (requests.exceptions.ConnectionError, ConnectionResetError) as e:
            logging.warning(f"üîÅ –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        except Exception as e:
            logging.error(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ polling: {e}", exc_info=True)
            time.sleep(15)

if __name__ == '__main__':
    Thread(target=run_flask).start()
    Thread(target=keep_alive_ping).start()
    start_bot()
