from flask import Flask
from threading import Thread
import telebot
from telebot import types


TOKEN = "7694567532:AAF2ith3388eqkIwrfyCRLmzm7icLZsXDM0"
bot = telebot.TeleBot(TOKEN)
app = Flask('')



user_gender = {}
user_age = {}
waiting_for_gender_change = set()
users_waiting = []
active_chats = {}
shown_welcome = set()

@app.route('/')
def home():
   return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

import os

def run():
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port)


def run_bot():
    bot.set_my_commands([
        telebot.types.BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        telebot.types.BotCommand("search", "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
        telebot.types.BotCommand("next", "–°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
        telebot.types.BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        telebot.types.BotCommand("settings", "–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ])
    bot.polling(none_stop=True)



@bot.message_handler(func=lambda msg: msg.text and msg.chat.id not in shown_welcome)
def send_welcome(msg):
   shown_welcome.add(msg.chat.id)
   markup = types.InlineKeyboardMarkup()
   markup.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start"))
   bot.send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\", —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "start")
def handle_inline_start(call):
   chat_id = call.message.chat.id
   message_id = call.message.message_id
   bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
   bot.clear_step_handler_by_chat_id(chat_id)
   handle_start(call.message)

@bot.message_handler(commands=['start'])
def handle_start(message):
   chat_id = message.chat.id
   if chat_id in user_gender and chat_id in user_age:
       send_search_button(chat_id)
       return

   bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç ü§ñ")
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
   markup.add(types.KeyboardButton("–ü–∞—Ä–µ–Ω—å"), types.KeyboardButton("–î–µ–≤—É—à–∫–∞"))
   bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"])
def handle_gender(message):
   chat_id = message.chat.id
   user_gender[chat_id] = message.text
   bot.send_message(chat_id, f"–ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=types.ReplyKeyboardRemove())
   bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 99):")
   bot.register_next_step_handler(message, handle_age)

def handle_age(message):
   chat_id = message.chat.id
   try:
       age = int(message.text)
       if 18 <= age <= 99:
           user_age[chat_id] = age
           bot.send_message(chat_id, f"–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {age}", reply_markup=types.ReplyKeyboardRemove())
           send_search_button(chat_id)
       else:
           bot.send_message(chat_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 99. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
           bot.register_next_step_handler(message, handle_age)
   except ValueError:
       bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
       bot.register_next_step_handler(message, handle_age)

def send_search_button(chat_id):
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   if chat_id in active_chats:
       markup.add(types.KeyboardButton("/next"), types.KeyboardButton("/stop"))
       bot.send_message(chat_id,
                        "–í—ã –≤ —á–∞—Ç–µ.\n\n/next ‚Äî —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥.",
                        reply_markup=markup)
   elif chat_id in users_waiting:
       markup.add(types.KeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"))
       bot.send_message(chat_id, "üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=markup)
   else:
       markup.add(types.KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
       bot.send_message(chat_id,
                        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
                        reply_markup=markup)

@bot.message_handler(commands=['settings'])
def change_settings(message):
   chat_id = message.chat.id
   waiting_for_gender_change.add(chat_id)
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
   markup.add(types.KeyboardButton("–ü–∞—Ä–µ–Ω—å"), types.KeyboardButton("–î–µ–≤—É—à–∫–∞"))
   bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –ø–æ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
@bot.message_handler(commands=['search'])
def handle_search(message):
   chat_id = message.chat.id
   if chat_id in active_chats:
       bot.send_message(chat_id, "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ.")
       return
   if chat_id in users_waiting:
       bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
       return

   markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   markup.add(types.KeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"))
   bot.send_message(chat_id, "üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=markup)

   for user in users_waiting:
       if user != chat_id:
           active_chats[chat_id] = user
           active_chats[user] = chat_id
           users_waiting.remove(user)
           bot.send_message(chat_id,
                            "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next ‚Äî –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                            reply_markup=types.ReplyKeyboardRemove())
           bot.send_message(user,
                            "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next ‚Äî –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                            reply_markup=types.ReplyKeyboardRemove())
           return
   users_waiting.append(chat_id)

@bot.message_handler(func=lambda m: m.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")
def stop_search(message):
   chat_id = message.chat.id
   if chat_id in users_waiting:
       users_waiting.remove(chat_id)
       bot.send_message(chat_id, "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
       send_search_button(chat_id)
   else:
       bot.send_message(chat_id, "–í—ã —Å–µ–π—á–∞—Å –Ω–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
       send_search_button(chat_id)

@bot.message_handler(commands=['stop'])
def stop_chat(message):
   end_chat(message.chat.id, notify=True)

@bot.message_handler(commands=['next'])
def next_chat(message):
   chat_id = message.chat.id
   if chat_id in users_waiting:
       bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
       return
   end_chat(chat_id, notify=True)
   handle_search(message)

def end_chat(chat_id, notify=False):
   partner = active_chats.pop(chat_id, None)
   if partner:
       active_chats.pop(partner, None)
       if notify:
           bot.send_message(partner, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞")
           bot.send_message(chat_id, "üö´ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç")
           send_search_button(partner)
           send_search_button(chat_id)
   elif chat_id in users_waiting:
       users_waiting.remove(chat_id)
       if notify:
           bot.send_message(chat_id, "üö´ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å")
           send_search_button(chat_id)

@bot.message_handler(func=lambda m: True)
def handle_chat(message):
   chat_id = message.chat.id
   partner_id = active_chats.get(chat_id)
   if partner_id:
       try:
           bot.send_message(partner_id, message.text)
       except:
           bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
   elif chat_id not in shown_welcome:
       send_welcome(message)

def keep_alive():
    t = Thread(target=run)
    t.start()

keep_alive()
bot.polling(none_stop=True)


